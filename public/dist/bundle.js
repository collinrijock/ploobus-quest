/******/ (() => { // webpackBootstrap
/*!*********************!*\
  !*** ./src/game.js ***!
  \*********************/
const socket = io();
const config = {
  type: Phaser.AUTO,
  width: 800,
  height: 600,
  physics: {
    default: 'arcade',
    arcade: {
      gravity: {
        y: 0
      },
      debug: false
    }
  },
  scene: {
    preload: preload,
    create: create,
    update: update
  }
};
const game = new Phaser.Game(config);
let player;
let otherPlayers = {};
function preload() {
  this.load.image('sky', 'https://labs.phaser.io/assets/skies/space3.png');
  this.load.image('player', 'https://labs.phaser.io/assets/sprites/phaser-dude.png');
}
function create() {
  this.add.image(400, 300, 'sky');
  player = this.physics.add.sprite(400, 300, 'player').setDisplaySize(50, 50);

  // Listen for updates from the server
  socket.on('currentPlayers', players => {
    Object.keys(players).forEach(id => {
      if (id === socket.id) {
        addPlayer(this, players[id], true);
      } else {
        addPlayer(this, players[id], false);
      }
    });
  });
  socket.on('newPlayer', playerInfo => {
    addPlayer(this, playerInfo, false);
  });
  socket.on('playerDisconnected', playerId => {
    if (otherPlayers[playerId]) {
      otherPlayers[playerId].destroy();
      delete otherPlayers[playerId];
    }
  });
  socket.on('playerMoved', playerInfo => {
    if (otherPlayers[playerInfo.id]) {
      otherPlayers[playerInfo.id].setPosition(playerInfo.x, playerInfo.y);
    }
  });
}
function update() {
  const cursors = this.input.keyboard.createCursorKeys();
  let moved = false;
  if (cursors.left.isDown) {
    player.x -= 5;
    moved = true;
  } else if (cursors.right.isDown) {
    player.x += 5;
    moved = true;
  }
  if (cursors.up.isDown) {
    player.y -= 5;
    moved = true;
  } else if (cursors.down.isDown) {
    player.y += 5;
    moved = true;
  }
  if (moved) {
    socket.emit('playerMovement', {
      x: player.x,
      y: player.y
    });
  }
}
function addPlayer(scene, playerInfo, isSelf) {
  const playerSprite = scene.add.sprite(playerInfo.x, playerInfo.y, 'player').setDisplaySize(50, 50);
  if (isSelf) {
    player = playerSprite;
  } else {
    otherPlayers[playerInfo.id] = playerSprite;
  }
}
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TSxFQUFFO0lBQ1I5QixNQUFNLEdBQUcrQixZQUFZO0VBQ3pCLENBQUMsTUFBTTtJQUNIOUIsWUFBWSxDQUFDYSxVQUFVLENBQUNGLEVBQUUsQ0FBQyxHQUFHbUIsWUFBWTtFQUM5QztBQUNKLEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9waGFzZXItZ2FtZS1zZXJ2ZXIvLi9zcmMvZ2FtZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBzb2NrZXQgPSBpbygpO1xuXG5jb25zdCBjb25maWcgPSB7XG4gICAgdHlwZTogUGhhc2VyLkFVVE8sXG4gICAgd2lkdGg6IDgwMCxcbiAgICBoZWlnaHQ6IDYwMCxcbiAgICBwaHlzaWNzOiB7XG4gICAgICAgIGRlZmF1bHQ6ICdhcmNhZGUnLFxuICAgICAgICBhcmNhZGU6IHtcbiAgICAgICAgICAgIGdyYXZpdHk6IHsgeTogMCB9LFxuICAgICAgICAgICAgZGVidWc6IGZhbHNlLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgc2NlbmU6IHtcbiAgICAgICAgcHJlbG9hZDogcHJlbG9hZCxcbiAgICAgICAgY3JlYXRlOiBjcmVhdGUsXG4gICAgICAgIHVwZGF0ZTogdXBkYXRlLFxuICAgIH0sXG59O1xuXG5jb25zdCBnYW1lID0gbmV3IFBoYXNlci5HYW1lKGNvbmZpZyk7XG5cbmxldCBwbGF5ZXI7XG5sZXQgb3RoZXJQbGF5ZXJzID0ge307XG5cbmZ1bmN0aW9uIHByZWxvYWQoKSB7XG4gICAgdGhpcy5sb2FkLmltYWdlKCdza3knLCAnaHR0cHM6Ly9sYWJzLnBoYXNlci5pby9hc3NldHMvc2tpZXMvc3BhY2UzLnBuZycpO1xuICAgIHRoaXMubG9hZC5pbWFnZSgncGxheWVyJywgJ2h0dHBzOi8vbGFicy5waGFzZXIuaW8vYXNzZXRzL3Nwcml0ZXMvcGhhc2VyLWR1ZGUucG5nJyk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICB0aGlzLmFkZC5pbWFnZSg0MDAsIDMwMCwgJ3NreScpO1xuXG4gICAgcGxheWVyID0gdGhpcy5waHlzaWNzLmFkZC5zcHJpdGUoNDAwLCAzMDAsICdwbGF5ZXInKS5zZXREaXNwbGF5U2l6ZSg1MCwgNTApO1xuXG4gICAgLy8gTGlzdGVuIGZvciB1cGRhdGVzIGZyb20gdGhlIHNlcnZlclxuICAgIHNvY2tldC5vbignY3VycmVudFBsYXllcnMnLCAocGxheWVycykgPT4ge1xuICAgICAgICBPYmplY3Qua2V5cyhwbGF5ZXJzKS5mb3JFYWNoKChpZCkgPT4ge1xuICAgICAgICAgICAgaWYgKGlkID09PSBzb2NrZXQuaWQpIHtcbiAgICAgICAgICAgICAgICBhZGRQbGF5ZXIodGhpcywgcGxheWVyc1tpZF0sIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhZGRQbGF5ZXIodGhpcywgcGxheWVyc1tpZF0sIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzb2NrZXQub24oJ25ld1BsYXllcicsIChwbGF5ZXJJbmZvKSA9PiB7XG4gICAgICAgIGFkZFBsYXllcih0aGlzLCBwbGF5ZXJJbmZvLCBmYWxzZSk7XG4gICAgfSk7XG5cbiAgICBzb2NrZXQub24oJ3BsYXllckRpc2Nvbm5lY3RlZCcsIChwbGF5ZXJJZCkgPT4ge1xuICAgICAgICBpZiAob3RoZXJQbGF5ZXJzW3BsYXllcklkXSkge1xuICAgICAgICAgICAgb3RoZXJQbGF5ZXJzW3BsYXllcklkXS5kZXN0cm95KCk7XG4gICAgICAgICAgICBkZWxldGUgb3RoZXJQbGF5ZXJzW3BsYXllcklkXTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgc29ja2V0Lm9uKCdwbGF5ZXJNb3ZlZCcsIChwbGF5ZXJJbmZvKSA9PiB7XG4gICAgICAgIGlmIChvdGhlclBsYXllcnNbcGxheWVySW5mby5pZF0pIHtcbiAgICAgICAgICAgIG90aGVyUGxheWVyc1twbGF5ZXJJbmZvLmlkXS5zZXRQb3NpdGlvbihwbGF5ZXJJbmZvLngsIHBsYXllckluZm8ueSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIGNvbnN0IGN1cnNvcnMgPSB0aGlzLmlucHV0LmtleWJvYXJkLmNyZWF0ZUN1cnNvcktleXMoKTtcbiAgICBsZXQgbW92ZWQgPSBmYWxzZTtcblxuICAgIGlmIChjdXJzb3JzLmxlZnQuaXNEb3duKSB7XG4gICAgICAgIHBsYXllci54IC09IDU7XG4gICAgICAgIG1vdmVkID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGN1cnNvcnMucmlnaHQuaXNEb3duKSB7XG4gICAgICAgIHBsYXllci54ICs9IDU7XG4gICAgICAgIG1vdmVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoY3Vyc29ycy51cC5pc0Rvd24pIHtcbiAgICAgICAgcGxheWVyLnkgLT0gNTtcbiAgICAgICAgbW92ZWQgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoY3Vyc29ycy5kb3duLmlzRG93bikge1xuICAgICAgICBwbGF5ZXIueSArPSA1O1xuICAgICAgICBtb3ZlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKG1vdmVkKSB7XG4gICAgICAgIHNvY2tldC5lbWl0KCdwbGF5ZXJNb3ZlbWVudCcsIHsgeDogcGxheWVyLngsIHk6IHBsYXllci55IH0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gYWRkUGxheWVyKHNjZW5lLCBwbGF5ZXJJbmZvLCBpc1NlbGYpIHtcbiAgICBjb25zdCBwbGF5ZXJTcHJpdGUgPSBzY2VuZS5hZGQuc3ByaXRlKHBsYXllckluZm8ueCwgcGxheWVySW5mby55LCAncGxheWVyJykuc2V0RGlzcGxheVNpemUoNTAsIDUwKTtcblxuICAgIGlmIChpc1NlbGYpIHtcbiAgICAgICAgcGxheWVyID0gcGxheWVyU3ByaXRlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG90aGVyUGxheWVyc1twbGF5ZXJJbmZvLmlkXSA9IHBsYXllclNwcml0ZTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsic29ja2V0IiwiaW8iLCJjb25maWciLCJ0eXBlIiwiUGhhc2VyIiwiQVVUTyIsIndpZHRoIiwiaGVpZ2h0IiwicGh5c2ljcyIsImRlZmF1bHQiLCJhcmNhZGUiLCJncmF2aXR5IiwieSIsImRlYnVnIiwic2NlbmUiLCJwcmVsb2FkIiwiY3JlYXRlIiwidXBkYXRlIiwiZ2FtZSIsIkdhbWUiLCJwbGF5ZXIiLCJvdGhlclBsYXllcnMiLCJsb2FkIiwiaW1hZ2UiLCJhZGQiLCJzcHJpdGUiLCJzZXREaXNwbGF5U2l6ZSIsIm9uIiwicGxheWVycyIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwiaWQiLCJhZGRQbGF5ZXIiLCJwbGF5ZXJJbmZvIiwicGxheWVySWQiLCJkZXN0cm95Iiwic2V0UG9zaXRpb24iLCJ4IiwiY3Vyc29ycyIsImlucHV0Iiwia2V5Ym9hcmQiLCJjcmVhdGVDdXJzb3JLZXlzIiwibW92ZWQiLCJsZWZ0IiwiaXNEb3duIiwicmlnaHQiLCJ1cCIsImRvd24iLCJlbWl0IiwiaXNTZWxmIiwicGxheWVyU3ByaXRlIl0sInNvdXJjZVJvb3QiOiIifQ==